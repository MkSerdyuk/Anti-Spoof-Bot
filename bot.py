import os
from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, ContentType
from antispoof import antispoof
import dotenv


dotenv.load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise EnvironmentError("BOT_TOKEN is not provided")

bot = Bot(token=BOT_TOKEN)

dp = Dispatcher(bot)

model = antispoof.AntiSpoof()

print("Model loaded")


@dp.message_handler(commands=["start", "help"])
async def handle_start(message: Message):
    await message.reply(
        """
–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Ñ–Ω—Ç–∏-—Å–ø—É—Ñ—Ñ–∏–Ω–≥–æ–≤—É—é –º–æ–¥–µ–ª—å. 

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫, —Ç–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø—É—Ñ–∏–Ω–≥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.
–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–∞ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ –≤ —Å–≤—è–∑–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–¥—Ä–æ–≤.

–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
üü© –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ. 
üü• –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞–º–∏ –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ –ª–∏—Ü–æ.
üü® –ñ–µ–ª—Ç–∞—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–∏—Ü–æ. 

–ï—Å–ª–∏ –Ω–∞ –≤–∏–¥–µ–æ –ª–∏—Ü–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–≤–µ–¥–µ–Ω–æ –∂–µ–ª—Ç—ã–º –∏–ª–∏ —Ä–∞–º–∫–∏ –Ω–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –±–æ–ª–µ–µ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∏ —Å –ª—É—á—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º. 

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!
"""
    )


@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: Message):
    photo = message.photo[-1]

    photo_path = (await photo.download(destination_dir="tmp/")).name

    photo_path = model.get_processed_photo_path(photo_path)

    if photo_path == -1:
        await message.reply(
            "üîç–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ c–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º"
        )
        return

    await message.reply_photo(photo=open(photo_path, "rb"))


@dp.message_handler(content_types=ContentType.VIDEO)
async def handle_video(message: Message):
    video = message.video

    video_path = (await video.download(destination_dir="tmp/")).name

    await message.reply("‚è≥–í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")

    video_path = model.get_processed_video_path(video_path)

    if video_path == -1:
        await message.reply(
            "üîç–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ–µ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º"
        )
        return

    await message.reply_video(video=open(video_path, "rb"))


@dp.message_handler(content_types=ContentType.VIDEO_NOTE)
async def handle_video_note(message: Message):
    video_note = message.video_note

    video_note_path = (await video_note.download(destination_dir="tmp/")).name

    await message.reply("‚è≥–í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")

    video_note_path = model.get_processed_video_path(video_note_path)

    if video_note_path == -1:
        await message.reply(
            "üîç–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ–µ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º"
        )
        return

    await message.reply_video_note(video_note=open(video_note_path, "rb"))


if __name__ == "__main__":
    executor.start_polling(dp)
